class Solution {
    public int findLength(int[] A, int[] B) {
        // time complexity: O(M*N)
        // space complexity: O(M*N)  => O(min(M,N))
        //dynamic programming
        int res  = 0;
        int nA = A.length;
        int nB = B.length;
        int[][] dp = new int[nA][nB];
        for (int i = 0; i < nB; i++) {
            if (B[i] == A[0]) dp[0][i] = 1;
        }
        for (int i = 1; i < nA; i++) {
            if (A[i] == B[0]) dp[i][0] = 1;
            for (int j = 1; j < nB; j++) {
                if (A[i] == B[j]) dp[i][j] = dp[i-1][j-1] + 1;
                else dp[i][j] = 0;
                res = Math.max(res,dp[i][j]);
            }
        }
        return res;
    }
}
