*/
/* algorithm to find dist between two node in a tree dist(TreeNode root, TreeNode r1, TreeNode r2) */
/*
class Solution {
    int res;
    public int dist(TreeNode root, TreeNode r1, TreeNode r2) {
        if (r1 == r2) return 0;
        res = -1;
        helper(root,r1,r2);
    }
    
    private int helper(TreeNode root, TreeNode r1, TreeNode r2) {
        if (root == null) return -1;
        int d1 = helper(root.left,r1,r2);
        int d2 = helper(root.right,r1,r2);
        if (d1 > 0 && d2 > 0) {
            res = d1+d2;
            return d1+d2;
        }
        else if (d1 > 0 || d2 > 0) {
            if (root == r1 || root == r2)  {res = Math.max(d1,d2); return Math.max(d1,d2);}
            else Math.max(d1,d2)+1;
        }
        else {
            if (root == r1 || root == r2) return 1;
            else return -1;
        }
    }
}
*/


class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        // time complexity: O(N)
        // space complexity: O(logN)
        // algorithm: depth first search
        List<Integer> res = new ArrayList<Integer>();
        helper(root,target.val,K,res);
        return res;
    }
    
    private void find(TreeNode root, int d, List<Integer> res) {
        if (root == null || d < 0) return;
        if (d == 0) res.add(root.val);
        else {
            find(root.left,d-1,res);
            find(root.right,d-1,res);
        }
    }
    
    private int helper(TreeNode root, int val, int K, List<Integer> res) {
        if (root == null) return -1;
        int d = -1;
        if (root.val == val) {  // return when find target
            find(root, K, res);
            return 1;
        }
        d = helper(root.left,val,K,res); // return distance from target: d
        if (d > 0 && d <= K) {        
            if (d == K) find(root,0,res);
            else find(root.right,K-d-1,res);
            return d+1;
        }
        d = helper(root.right,val,K,res); // return distance from target: d
        if (d > 0 && d <= K) {
            if (d == K) find(root,0,res);
            else find(root.left,K-d-1,res);
            return d+1;
        }
        else return -1;
    }
}
