class Solution {
    public List<Integer> cheapestJump(int[] A, int B) {
        int n = A.length;
        int[] dp = new int[n];
        int[] next = new int[n];
        if (n < 1 || A[n-1] < 0) return new ArrayList<Integer>();
        dp[n-1] = 0;
        next[n-1] = n;
        for (int i = n-2; i >= 0; i--) {
            if (A[i] < 0) dp[i] = -1;
            else {
                dp[i] = Integer.MAX_VALUE;
                for (int j = 1; i+j < n && j <= B; j++) {
                    if (dp[i] > dp[i+j] && dp[i+j] >= 0) {
                        dp[i] = dp[i+j];
                        next[i] = i+j;
                    }
                }
                dp[i] = dp[i] == Integer.MAX_VALUE ? -1 : dp[i]+A[i];
            }
        }
        List<Integer> result = new ArrayList<Integer>();
        if (dp[0] < 0) return new ArrayList<Integer>();
        else {
            int i = 0;
            while (i < n) {
                result.add(i+1);
                i = next[i];
            }
            return result;
        }
    }
}
