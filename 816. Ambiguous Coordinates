class Solution {
    public List<String> ambiguousCoordinates(String S) {
        
        // time complexity:  O(N^3)
        // space complexity: O(N)
        // algorithm: divide and conquer
        List<String> res = new ArrayList<String>();
        int n = S.length();
        for (int i = 1; i < n-2; i++) {
            List<String> left = helper(S.substring(1,1+i));
            List<String> right = helper(S.substring(1+i,n-1));
            //System.out.println("left: "+left);
            //System.out.println("right:"+right);
            int l = left.size();
            int r = right.size();
            if (l > 0 && r > 0) {
                for (int j = 0; j < l; j++) {
                    for (int k = 0; k < r; k++) {
                        res.add("("+left.get(j)+", "+right.get(k)+")");
                    }
                }
            }
        }
        return res;
    }
    
    private List<String> helper(String str) {
        int n = str.length();
        List<String> res = new ArrayList<String>();
        if (str.charAt(0) == '0') {
            if (n == 1) res.add("0");
            else if (n > 1 && str.charAt(n-1) != '0') res.add("0."+str.substring(1,n));
        }
        else if (str.charAt(n-1) == '0') {
            res.add(str);
        }
        else {
            for (int i = 1; i < n; i++) {
                res.add(str.substring(0,i)+"."+str.substring(i,n));
            }
            res.add(str);    // => must add this full string
        }
        return res;
    }
    
}
