class Solution {
    public int minimumDeleteSum(String s1, String s2) {
        // time complexity: O(M*N), M: s1.length(), N : s2.length()
        // space complexity: O(M*N) => O(min(M,N))
        // algorithm: dynamic programming
        int n1 = s1.length();
        int n2 = s2.length();
        int[][] dp = new int[n1+1][n2+1];
        for (int i = 0; i < n2; i++){
            dp[0][i+1] = dp[0][i] + s2.charAt(i) - 'a' + 97;
        }
        for (int i= 0; i < n1; i++) {
            dp[i+1][0] = dp[i][0] + s1.charAt(i) - 'a' + 97;
            for (int j = 0; j < n2; j++) {
                dp[i+1][j+1] = Math.min(dp[i][j+1]+s1.charAt(i) - 'a' + 97,dp[i+1][j]+s2.charAt(j) - 'a' + 97);
                if (s1.charAt(i) == s2.charAt(j)) {
                    dp[i+1][j+1] = Math.min(dp[i][j],dp[i+1][j+1]);
                }
            }
        }
        return dp[n1][n2];
        
    }
}
