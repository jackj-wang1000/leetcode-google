class Solution {
    public int calPoints(String[] ops) {
        // time complexity: O(N), each element is pushed and poped once at most.
        // space complexity: O(N)
        // algorithm:ã€€pointer + stack
        int n = ops.length;
        int[] num = new int[n];
        int res = 0;
        int curr = 0;
        int[] last = new int[2];
        for (int i = 0; i < n; i++) {
            if (ops[i].equals("+")) {
                int sum = last[0] + last[1];
                res = res + sum;
                last[0] = last[1];
                last[1] = sum;
                num[curr++] = sum;
            }
            else if (ops[i].equals("D")) {
                int sum = last[1]*2;
                res += sum;
                last[0] = last[1];
                last[1] = sum;
                num[curr++] = sum;
            }
            else if (ops[i].equals("C")) {
                res -= last[1];
                last[1] = last[0];
                last[0] = curr >= 3 ? num[curr-3] : 0;
                curr = curr > 0 ? curr-1 : 0;
            }
            else {
                int sum = Integer.parseInt(ops[i]);
                res += sum;
                last[0] = last[1];
                last[1] = sum;
                num[curr++] = sum;
            }
        }
        return res;
    }
}
