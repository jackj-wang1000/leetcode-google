class Solution {
    public int reachNumber(int target) {
        if (target < 0) target = -target;
        // time complexity:  lg(N)
        // space complexity: O(1)
        int low = 0;
        int high = 46340; //44721;   // N*(N+1)/2 <= 10^9   =>   N <= 44721 
        int mid;
        //      N:            1     2      3      4      5       6       7       8       9
        // sum =N*(N+1)/2     1     3      6      10     15      21     28       36      45
        // target must be combined with number of 1, 2 , 3,  4,  5, 6, 7, 8, 9  with positive or negative sign.
        // each negative number will deduct twice value of it from the sum
    // so for target position, the result is to find nearest number great or equal than it(if even find nearest even, if odd find odd
        while (low < high) {   // find first N that N*(N+1)/2 >= target
            mid = low + (high - low)/2;
            if (target > mid*(mid+1)/2) {
                low = mid + 1;
            }
            else if (target < mid*(mid+1)/2){
                high = mid;
            }
            else return mid;
            /*
            System.out.println("low = " +low+" high = " +high+" mid = " +mid);
            int s = mid*(mid+1)/2;
            System.out.println("target = " +target+" sum = " +s);*/
        }
        int sum = high*(high+1)/2;
        if ((sum-target)%2 == 0) return high;
        else if ((sum+high+1-target)%2 == 0) return high+1;
        else return high+2;
    }
}
