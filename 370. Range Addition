
public class Solution {
    public int[] getModifiedArray(int length, int[][] updates) {
        // get rid of treemap
        int n = updates.length;
        int[] res = new int[length];
        for (int i = 0; i < n; i++) {
            res[updates[i][0]] += updates[i][2];
            if (updates[i][1]+1 < length) res[updates[i][1]+1] -= updates[i][2];
        }
        int acc = 0;
        for (int i = 0; i < length; i++) {
            acc += res[i]; 
            res[i] = acc;
        }
        return res;
    }
}



// ***************************************************************************************


public class Solution {
    public int[] getModifiedArray(int length, int[][] updates) {
        TreeMap<Integer,Integer> tm = new TreeMap<Integer,Integer>();
        int n = updates.length;
        for (int i = 0; i < n; i++) {
            if (!tm.containsKey(updates[i][0])) tm.put(updates[i][0],updates[i][2]);
            else tm.put(updates[i][0],tm.get(updates[i][0]) + updates[i][2]);
            if (!tm.containsKey(updates[i][1]+1)) tm.put(updates[i][1]+1,-updates[i][2]);
            else tm.put(updates[i][1]+1,tm.get(updates[i][1]+1) - updates[i][2]);
        }
        int[] res = new int[length];
        int acc = 0;
        Iterator<Integer> iter = tm.keySet().iterator();
        int idx = iter.next();
        for (int i = 0; i < length; i++) {
            if (i == idx && iter.hasNext()) {
                acc += tm.get(idx);
                idx = iter.next();
            }
            res[i] = acc;
        }
        return res;
    }
}
