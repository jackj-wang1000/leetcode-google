class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        // time complexity: O(N)
        // space complexity: O(1)
        // algorithm: swap
        int n = nums.length;
        List<Integer> res = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            while (nums[i] != i+1 && nums[nums[i]-1] != nums[i]) {
                swap(nums,nums[i]-1,i);
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != i+1) res.add(i+1);
        }
        return res;
    }
    
    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
