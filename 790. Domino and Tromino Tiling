class Solution {
    public int numTilings(int N) {
        // time complexity: O(N)
        // space complexity: O(1)
        // algorithm: dynamic programming
        if (N <= 2) return N;
        int[][] dp = new int[][]{{1,0,0},{1,1,1}};
        int MOD = 1000000007;
        int[] tmp = new int[3];
        for (int i = 2; i <= N; i++) {
            //tmp[0] = (dp[i-1][0] + dp[i-2][0] + dp[i-2][1] + dp[i-2][2]) % MOD;
            //tmp[0] = (dp[1][0] + dp[0][0] + dp[0][1] + dp[0][2]) % MOD;
            tmp[0] = (dp[1][0] + dp[0][0]) % MOD;
            tmp[0] = (tmp[0] + dp[0][1]) % MOD;
            tmp[0] = (tmp[0] + dp[0][2]) % MOD;
            //tmp[1] = (dp[i-1][0] + dp[i-1][2]) % MOD;
            tmp[1] = (dp[1][0] + dp[1][2]) % MOD;
            //tmp[2] = (dp[i-1][0] + dp[i-1][1]) % MOD;
            tmp[2] = (dp[1][0] + dp[1][1]) % MOD;
            copyTo(dp[1],dp[0]);
            copyTo(tmp,dp[1]);
        }
        return dp[1][0];
    }
    
    private void copyTo(int[] a, int[] b) {
        for (int i = 0; i < a.length; i++) {
            b[i] = a[i];
        }
    }
}
