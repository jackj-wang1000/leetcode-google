class Solution {
    public int change(int amount, int[] coins) {
        // time complexity: O(amount*N)
        // space complexity: O(amount*N)
        // algorithm: dynamic programming
        int n = coins.length;
        int[][] dp = new int[amount+1][n+1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[0][i] = 1;
            for (int j = 1; j <= amount; j++) {
                dp[j][i] = dp[j][i-1];
                if (j >= coins[i-1]) dp[j][i] += dp[j-coins[i-1]][i];
                //dp[j][i] = dp[j][i-1] + j >= coins[i-1] ? dp[j-coins[i-1]][i] : 0;  // doesn't work in java
                //System.out.println("dp["+j+"]["+i+"]: "+dp[j][i]);
            }
        }
        return dp[amount][n];
    }
}

/*
class Solution {
    public int change(int amount, int[] coins) {
        
        //algorithm: dynamic programming
        int n = coins.length;
        if (amount == 0) return 1;
        else if (n == 0) return 0;
        int[][] dp = new int[amount+1][n];
        for (int i = 0; i < n; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i <= amount; i++) {
            dp[i][0] = i % coins[0] == 0 ? 1 : 0;
            for (int j = 1; j < n; j++) {
                int a = i;
                while (a >= 0) {
                    dp[i][j] += dp[a][j-1];
                    a -= coins[j];
                }
            }
        }
        return dp[amount][n-1];
    }
}

*/
