class Solution {
    public boolean isReflected(int[][] points) {
    // time complexity: O(N)
    // space : O(N)
        int L = points.length;
        int min_x, max_x;
        int min_x = max_x = points[0][0];
        Map<Integer,Set<Integer>> map = new HashMap<Integer,Set<Integer>>();
        for (int i = 0; i < L; i++) {
            min_x = Math.min(min_x,points[i][0]);
            max_x = Math.max(max_x,points[i][0]);
            if (!map.containsKey(points[i][0])) map.put(points[i][0],new HashSet<Integer>());
            map.get(points[i][0]).add(points[i][1]);
        }
        int sum = min_x + max_x;
        for (int i = 0; i < L; i++) {
            int x = sum - points[i][0];
            if (!map.containsKey(x) || !map.get(x).contains(points[i][1])) return false;
        }
        return true;
        
    }
        
    

}
