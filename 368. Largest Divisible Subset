class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        // time complexity: O(N^2)
        // space complexity: O(N)
        // algorithm: dynamic programming
        List<Integer> res = new ArrayList<Integer>();
        Arrays.sort(nums);
        int n = nums.length;
        if (n == 0) return res;
        int[] dp = new int[n];  //dp[i]: max set length ending with nums[i]
        int[] pre = new int[n]; // previous index of # dividable of nums[i]
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            pre[i] = -1;
        }
        int max_len = 1;
        int max_index = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                if (nums[j] % nums[i] == 0 && dp[j] < dp[i] + 1) {
                    dp[j] = dp[i] + 1;
                    pre[j] = i;
                    if (dp[j] > max_len) {
                        max_len = dp[j];
                        max_index = j;
                    }
                }
            }
        }
        while (max_index >= 0) {
            res.add(nums[max_index]);
            max_index = pre[max_index];
        }
        return res;
    }
}
