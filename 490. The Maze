class Solution {
    private int col,row;
    private static final int[][] direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};  
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        // time complexity: O(M*N)
        // space complexity: O(M*N)
        // algorithm: breadth first search
        col = maze[0].length;
        row = maze.length;
        Queue<Integer> bfs = new LinkedList<Integer>();
        Set<Integer> visited = new HashSet<Integer>();
        int curr = start[0] * col + start[1];
        int dst = destination[0] * col + destination[1];
        bfs.offer(curr);
        visited.add(curr);
        while (!bfs.isEmpty()) {
            curr = bfs.poll();
            if (curr == dst) return true;
            int x = curr / col;
            int y = curr % col;
            for (int i = 0; i < 4; i++) {
                int x_next = x;
                int y_next = y;
                while (x_next >= 0 && x_next < row && y_next >= 0 && y_next < col && maze[x_next][y_next] == 0) {
                    x_next += direction[i][0];
                    y_next += direction[i][1];
                }
                x_next -= direction[i][0];
                y_next -= direction[i][1];
                int next = x_next * col + y_next;
                if (!visited.contains(next)) {
                    visited.add(next);
                    bfs.offer(next);
                }
            }
        }
        return false;
    }
    
}


class Solution {
    private int col,row;
    private static final int[][] direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};  
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        // time complexity: O(row*col)
        // space complexity: O(row + col)
        // algorithm: depth first search
        col = maze[0].length;
        row = maze.length;
        Set<Integer> visited = new HashSet<Integer>();
        int curr = start[0]*col + start[1];
        visited.add(curr);
        return helper(maze,curr, destination[0] * col + destination[1], visited);
    }
    
    private boolean helper(int[][] maze, int curr, int dst, Set<Integer> visited) {
        if (curr == dst) return true;
        int x = curr / col;
        int y = curr % col;
        for (int i = 0; i < 4; i++) {
            int x_next = x;
            int y_next = y;
            while (x_next >= 0 && x_next < row && y_next >= 0 && y_next < col && maze[x_next][y_next] == 0){
                x_next += direction[i][0];
                y_next += direction[i][1];
            }
            x_next -= direction[i][0];
            y_next -= direction[i][1];
            int next = x_next * col + y_next;
            if (!visited.contains(next)) {
                visited.add(next);
                if (helper(maze,next,dst,visited)) return true;
            }
        }
        return false;
    }
    
}
