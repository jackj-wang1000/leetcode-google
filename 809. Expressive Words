class Solution {
    public int expressiveWords(String S, String[] words) {
        // time complexity: total number of characters in words array.
        // space complexity: O(N), N represent length of S
        int res = 0;
        int l = S.length();
        int n = words.length;
        int[] cnt = new int[l];  // duplication times >= 3 or 0 for i th character
        int start = 0;
        for (int i = 0; i < l; i++) {
            char c = S.charAt(i);
            if (c != S.charAt(start)) {
                if (i - start >= 3)  cnt[start] = i - start;
                start = i;
            }
        }
        if (l - start >= 3) cnt[start] = l-start;
        for (int i = 0; i < n; i++) {
            if (compare(words[i],S,cnt)) res++;
        }
        return res;
    }
    
    private boolean compare(String str, String S, int[] cnt) {
        int n = S.length();
        int l = str.length();
        int i,j;
        i = 0;
        j = 0;
        while (i < n && j < l) {
            if (S.charAt(i) != str.charAt(j)) return false;
            int len = cnt[i];
            if (len > 0) {
                while (j < l && len > 0) {
                    if (S.charAt(i) != str.charAt(j)) break;
                    len--;
                    j++;
                }
                j--;
            }
            i = Math.max(cnt[i],1)+i;
            j++;
        }
        return i==n && j == l;
        
    }
    
}
