class Solution {
    public int findMaxLength(int[] nums) {
        // time complexity: O(N)
        // spacec complexity: O(N)
        // algorithm: HashMap
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<Integer,Integer>();
        int res = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) sum++;
            else sum--;
            if(sum == 0) res = i+1;
            else if (map.containsKey(sum)) {
                res = Math.max(res, i-map.get(sum));
            }
            else map.put(sum,i);
        }
        return res;
    }
}

/*
class Solution {
    public int findMaxLength(int[] nums) {
        // time complexity: O()
        // space complexity: O(N)
        // algorithm : double pointer
        int n = nums.length;
        if (n <= 1) return 0;
        int[] sum = new int[n];
        sum[0] = nums[0];
        int res = 0;
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i-1] + nums[i];
            if (sum[i]*2 == i+1) res = i+1;
            else {
                int j = i - 2 * Math.min(i+1-sum[i], sum[i]);
                while (j < i) {
                    int t = sum[i] - sum[j];
                    if (t*2 == i- j) {
                        res = Math.max(res, i- j);
                        break;
                    }
                    else j = i - 2*Math.min(i-j-t, t);
                }
            }
        }
        return res;
    }
}
*/
