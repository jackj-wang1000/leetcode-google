
public class Solution {
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        // time complexity: O(N + k)
        // space complexity: O(k + logN)
        // algorithm:  inOrder traverse + Queue
        Queue<Integer> fifo = new LinkedList<Integer>();
        inOrder(root,fifo,k, target);
        List<Integer> res = new ArrayList<Integer>();
        while (!fifo.isEmpty()) {
            res.add(fifo.poll());
        }
        return res;
    }
    
    private void inOrder(TreeNode root, Queue<Integer> fifo, int k, int target) {
        if (root == null) return;
        inOrder(root.left, fifo, k, target);
        if (fifo.size() < k) {
            fifo.offer(root.val);
        }
        else if (Math.abs(fifo.peek() - target) > Math.abs(root.val - target)) {
            fifo.poll();
            fifo.offer(root.val);
        } 
        else return;   // root has larger distance to target, so all its successor.
        inOrder(root.right, fifo, k, target);
    }
}



public class Solution {
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        // time complexity: O(logN + k)
        // space complexity: O(logN)
        // algorithm: two stack
        Stack<TreeNode> pred = new Stack<TreeNode>();
        Stack<TreeNode> succ = new Stack<TreeNode>();
        while (root != null) {
            if (target >= root.val) {
                pred.push(root);
                root = root.right
            }
            else {
                succ.push(root);
                root = root.left;
            }
        }
        List<Integer> res = new ArrayList<Integer>();
        while (k > 0) {
            if (succ.isEmpty() || (!pred.isEmpty() && target - pred.peek() < succ.peek() - target)) {
                res.add(pred.peek());
                getNextPredecessor(pred);
            }
            else {
                res.add(succ.peek());
                getNextSuccessor(succ);
            }
            k--;
        }
        return res;
    }
    
    private void getNextPredecessor(Stack<TreeNode> st) {
        TreeNode curr = st.pop();
        if (curr.left != null) {
            curr = curr.left;
            while (curr != null) st.push(curr);
        }
    }
    
    private void getNextSuccessor(Stack<TreeNode> st) {
        TreeNode curr = st.pop();
        if (curr.right != null) {
            curr = curr.right;
            while (curr != null) st.push(curr);
        }
    }
    
}
