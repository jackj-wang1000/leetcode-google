// Given a nested list of integers, return the sum of all integers in the list weighted by their depth.

// Each element is either an integer, or a list -- whose elements may also be integers or other lists.

// Example 1:
// Given the list [[1,1],2,[1,1]], return 10. (four 1's at depth 2, one 2 at depth 1)

// Example 2:
// Given the list [1,[4,[6]]], return 27. (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27)

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    // algorithm: recursive/ depth first search
    public int depthSumInverse(List<NestedInteger> nestedList) {
        List<Integer> v = new ArrayList<Integer>();  // save sum by depth;
        helper(nestedList,v, 1);
        int sz = v.size();
        int res = 0;
        for (int i = 0; i < sz; i++) {
            res += v.get(i) * (sz-i);
        }
        return res;
    }
    
    private void helper(List<NestedInteger> nestedList, List<Integer> v, int depth) {
        if (depth > v.size()) v.add(0);
        for (NestedInteger i : nestedList) {
            if (i.isInteger()) v.set(depth-1,v.get(depth-1) + i.getInteger());
            else {
                List<NestedInteger> next = i.getList();
                if (!next.isEmpty()) helper(next, v, depth+1);
            }
        }
    }
}


public class Solution {
    // algorithm: breadth first search
    public int depthSumInverse(List<NestedInteger> nestedList) {
        Queue<List<NestedInteger>> bfs = new LinkedList<List<NestedInteger>>();
        bfs.offer(nestedList);
        int unweight_sum = 0;
        int weighted_sum = 0;
        while(!bfs.isEmpty()) {
            int sz = bfs.size();
            for (int k = 0; k < sz; k++) {   // in new same depth
                List<NestedInteger> curr = bfs.poll();
                for (NestedInteger i : curr) {
                    if (i.isInteger()) unweight_sum += i.getInteger();
                    else {
                        List<NestedInteger> next = i.getList();
                        if (!next.isEmpty()) bfs.offer(next);
                    }
                }
            }
            weighted_sum += unweight_sum;
        }
        return weighted_sum;
    }
    
}
