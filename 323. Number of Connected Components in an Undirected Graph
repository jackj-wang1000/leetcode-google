public class Solution {
    public int countComponents(int n, int[][] edges) {
        // time complexity: O(L*logn)
        // space complexity: O(n)
        // algorithm: union-find
        int[] root = new int[n];
        int size = n;
        int L = edges.length;
        for (int i = 0; i < n; i++) {
            root[i] = i;
        }
        for (int i  = 0; i < L; i++) {
            int r1 = findRoot(root, edges[i][0]);
            int r2 = findRoot(root, edges[i][1]);
            if (r1 != r2) {
                root[r1] = r2;
                size--;
            }
        }
        return size;
    }
    
    private int findRoot(int[] root, int i) {
        while (root[i] != i) {
            int p = root[i];
            root[i] = root[p];
            i = root[i];
        }
        return i;
    }
}
