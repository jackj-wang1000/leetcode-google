public class Solution {
    public int closestValue(TreeNode root, double target) {
        // time complexity: O(logN)
        // space complexity: O(1)
        // algorithm: iterative 
        int res = root.val;
        while (root != null) {
            if (Math.abs(root.val - target) < Math.abs(res - target)) res = root.val;
            root = root.val >= target ? root.left : root.right;
        }
        return res;
    }
}

public class Solution {
    public int closestValue(TreeNode root, double target) {
        // time complexity: O(logN)
        // space complexity: O(logN)
        // algorithm : recursive
        int res = root.val;
        TreeNode next = root.val >= target ? root.left : root.right;
        if (next == null) return res;
        int v = closestValue(next, target);
        return Math.abs(res-target) < Math.abs(v-target) ? res : v;
    }
}
