class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        // time complexity: O(N)
        // space complexity: O(N)
        // algorithm : breadth first search
        if (root == null) return 0;
        int res = 1;
        Queue<TreeNode> bfs1 = new LinkedList<TreeNode>();
        Queue<Integer> bfs2 = new LinkedList<Integer>();
        
        bfs1.offer(root);
        bfs2.offer(1);
        TreeNode curr = root;
        while (!bfs1.isEmpty()) {
            int n = bfs1.size();
            int start = bfs2.peek();
            int end = start;
            for (int i = 0; i < n; i++) {
                curr = bfs1.poll();
                end = bfs2.poll();
                if (curr.left != null) {
                    bfs1.offer(curr.left);
                    bfs2.offer(end*2);
                }
                if (curr.right != null) {
                    bfs1.offer(curr.right);
                    bfs2.offer(end*2 + 1);
                }
            }
            res = Math.max(end-start+1,res);
        }
        return res;
    }
}
