public class Solution {
    public int numWays(int n, int k) {
        
    }
}



public class Solution {
    /* Wrong result; only consider at most one same color neighbor; (there be more )
    public int numWays(int n, int k) {
        // paint n fence with k color which only allow different neighbor color:   k * (k-1)^(n-1)
        // two neighbor has same color: (n-1) * k * (k-1)^(n-2); just the case of painting n-1 fence with one duplicate(n-1 position)
        //return k*myPow(k-1,n-1) + (k-1) * k * myPow(k-1,n-2);
        if (n == 0) return 0;
        else if (n == 1) return k*myPow(k-1,n-1);
        else return k*myPow(k-1,n-1) + (n-1) * k * myPow(k-1,n-2);
    }
    
    private int myPow(int x, int y) {
        if (y == 0) return 1;
        int t = myPow(x, y/2);
        return y % 2 == 0? t * t : t * t * x;
    }
    */
    
    
    public int numWays(int n, int k) {
        if (n == 0) return 0;
        int diff = k;          // ways to paint with different color as to previous fence
        int same = 0;          // ways to paint with same color as to previous fence
        for (int i = 2; i <= n; i++) {
            int t = diff;
            diff = (same + diff) * (k-1);
            same = t;
        }
        return same + diff;
    }
}
