class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        // time complexity: O(N)
        // space : O(N)
        int L = nums.length;
        int[][] dp = new int[3][L];   
        int[] sum = new int[L];
        int s = 0;
        int maxSum = Integer.MIN_VALUE;
        int maxIndex = 0;
        int[][] index = new int[3][L];
        for(int i = 0; i < L; i++) {
            s += nums[i];
            if (i-k >= 0) s -= nums[i-k];
            sum[i] = s;
            if(s > maxSum) {
                maxSum = s;
                maxIndex = i;
            }
            dp[0][i] = maxSum;
            index[0][i] = maxIndex;
        }
        
        for (int j = 1; j < 3; j++) {
            maxSum = Integer.MIN_VALUE;
            for(int i = (j+1)*k-1; i < L; i++) {
                if (dp[j-1][i-k] + sum[i] > maxSum) {
                    maxSum = dp[j-1][i-k] + sum[i];
                    maxIndex = i;
                }
                dp[j][i] = maxSum;
                index[j][i] = maxIndex;
            }
        }
        int[] res = new int[3];
        res[2] = maxIndex-k+1;
        maxIndex = index[1][maxIndex-k];
        res[1] = maxIndex-k+1;
        maxIndex = index[0][maxIndex-k];
        res[0] = maxIndex-k+1;
        return res;
    }
}
