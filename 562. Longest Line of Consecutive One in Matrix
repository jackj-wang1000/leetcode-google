public class Solution {
    public int longestLine(int[][] M) {
        // time complexity: O(r*c)
        // space complexity: O(r*c)
        // algorithm : dynamic programming
        int r = M.length;
        if (r == 0) return 0;
        int c = M[0].length;
        int res = 0;
        int[][][] dp = new int[r][c][4];
        int[] dy = new int{-1,-1,0,1};
        int[] dx = new int{0,-1,-1,-1};
        for(int i = 0; i < r; i++) {
            for(int j = 0; j < c; j++) {
                if (M[i][j] == 1) {
                    for (int k = 0; k < 4; k++) {
                        int x = i + dx[k];
                        int y = j + dy[k];
                        if (x >= 0 && x < r && y >= 0 && y < c) d[i][j][k] = d[x][y][k]+1;
                        else d[i][j][k] = 1;
                        res = Math.max(res,d[i][j][k]);
                    }
                }
            }
        }    
        return res;
    }
}
