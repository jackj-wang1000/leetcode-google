class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        // time compplexity: O(N)
        // space complexity: O(N)
        // algorithm: HashMap
        int n = nums.length;
        Map<Integer,Integer> map = new HashMap<Integer, Integer>();
        int sum = 0;
        map.put(0,-1);
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (sum == 0 && i >= 2) return true;
            if (k != 0) {
                int curr = sum % k;
                if (map.containsKey(curr)) {
                    if (i - map.get(curr) >= 2) return true;
                }
                else map.put(curr, i);
            }
            else {
                if (map.containsKey(sum)) {
                    if (i - map.get(sum) >= 2) return true;
                }
                else map.put(sum, i);
            }
        }
        return false;
        
    }
}
