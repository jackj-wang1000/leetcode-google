class Solution {
    public int deleteAndEarn(int[] nums) {
        // time complexity: O(N+NlogN) ~ O(NlogN) 
        // space complexity: O(N)
        // Sorting + dynamic programming
        int n = nums.length;
        if(n == 0) return 0;
        int[] dp_w = new int[n];
        int[] dp_wo = new int[n];
        // dp_w[i] maximum points gained from index 0 to i, when keep nums[i]
        // dp_wo[i] maximum points gained from index 0 to i, when delete nums[i];
        // sort the array first
        Arrays.sort(nums);   // sorting O(NlogN)
        dp_w[0] = 0;
        dp_wo[0] = nums[0];
        for (int i = 1; i < n; i++) {
            dp_w[i] = nums[i] == nums[i-1] ? dp_w[i-1] : Math.max(dp_w[i-1],dp_wo[i-1]);
            if (nums[i] == nums[i-1])  dp_wo[i] = dp_wo[i-1] + nums[i];
            else if(nums[i] > nums[i-1]+1) dp_wo[i] = Math.max(dp_w[i-1],dp_wo[i-1]) + nums[i];
            else dp_wo[i] = dp_w[i-1] + nums[i];
            
            //System.out.println("nums: "+nums[i]+"   dp_w: "+dp_w[i]+" dp_wo: "+dp_wo[i]);
        }        
        return Math.max(dp_w[n-1],dp_wo[n-1]);
        
    }
}
