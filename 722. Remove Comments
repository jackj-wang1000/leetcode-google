
class Solution {
    public List<String> removeComments(String[] source) {
        // time complexity : O(N)  N: total characters of source
        List<String> res = new ArrayList<String>();
        int n = source.length;
        boolean inBlockComment = false;
        StringBuilder strb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int l = source[i].length();
            for (int j = 0; j < l; j++) {
                if (!inBlockComment) {
                    if (j == l-1) {
                        strb.append(source[i].charAt(j));
                    }
                    else {
                        char c1 = source[i].charAt(j);
                        char c2 = source[i].charAt(j+1);
                        if (c1 == '/' && c2 == '/') {
                            break;
                        }
                        else if (c1 == '/' && c2 == '*') {
                            inBlockComment = true;
                            j++;
                        }
                        else {
                            strb.append(c1);
                        }
                    }
                }
                else {
                    if (j < l-1) {
                        char c1 = source[i].charAt(j);
                        char c2 = source[i].charAt(j+1);
                        if (c1 == '*' && c2 == '/') {inBlockComment = false; j++;}
                    }
                }
            }
            if(strb.length() > 0 && !inBlockComment) {
                res.add(strb.toString());
                strb = new StringBuilder();
            }
        }
        return res;
        
    }
}




class Solution {
    public List<String> removeComments(String[] source) {
        
        List<String> res = new ArrayList<String>();
        int n = source.length;
        boolean inBlockComment = false;
        int start = 0;
        StringBuilder strg = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (! inBlockComment) {
                int ind = parseLine(source[i],start);
                if (ind >= 0) {
                    if (source[i].charAt(ind+1) == '*') {
                        strg.append(source[i].substring(start,ind));
                        //pushCurrentLine(strg,source[i].substring(start,ind),start);
                        i--;                 // in case of  block comment in the same line
                        start = ind+2;
                        inBlockComment = true;
                    }
                    else if (ind > 0){
                        strg.append(source[i].substring(start,ind));
                        //pushCurrentLine(strg,source[i].substring(start,ind),start);
                        // in case of blockcomment and line comment in one line like:   /* abcdef *///abcdef
                        if (strg.length() > 0) { res.add(strg.toString()); strg = new StringBuilder();} 
                        start = 0;
                    }
                }
                else {
                    strg.append(source[i].substring(start));
                    res.add(strg.toString());
                    strg = new StringBuilder();
                    //pushCurrentLine(strg,source[i].substring(start),start);
                    start = 0; }
            }
            else {
                int ind = findBlockCommentEnd(source[i],start);
                if (ind >= 0) {
                    if (ind + 2 < source[i].length()) {
                        start = ind + 2;
                        i--;  
                    }
                    else  {  // case of block comment in one line /* abcdefg */ 
                        if (strg.length() != 0)  { res.add(strg.toString()); strg = new StringBuilder();}
                        start = 0;
                    }
                    inBlockComment = false;
                }
                else start = 0;
            }
        }
        return res;
    }
    
    
    
    private int parseLine(String str, int start) {
        int l = str.length();
        if (l - start < 2) return -1;
        for (int i = start; i < l-1; i++) {
            if (str.charAt(i) == '/' && (str.charAt(i+1) == '/' || str.charAt(i+1) == '*'))  return i;
        }
        return -1;
    }
    
    private int findBlockCommentEnd(String str, int start) {
        int l = str.length();
        if (l - start < 2) return -1;
        for (int i = start; i < l-1; i++) {
            if (str.charAt(i) == '*' && str.charAt(i+1) == '/' )  return i;
        }
        return -1;
    }

}
