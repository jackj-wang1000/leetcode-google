class Solution {
    public int longestMountain(int[] A) {
        // time complexity: O(N)
        // space complexity: O(1)
        // algorithm: one pass scan
        
        int n = A.length;
        if (n < 3) return 0;
        boolean st = false; // up 
        int res = 0;
        int start = 0;
        for (int i = 1; i < n; i++) {
            if(!st) {                   // up mountain stage
                if(A[i] < A[i-1]) {
                    if (i - start >= 2) st = true;
                    else start = i;
                }
                else if(A[i] == A[i-1]) {
                    start = i;
                }
            }
            else {                    // down mountain stage
                if (A[i] > A[i-1]) {
                    res = Math.max(res,i-start);
                    st = false;
                    start = i-1;
                }
                else if (A[i] == A[i-1]){
                    res = Math.max(res,i-start);
                    st = false;
                    start = i;
                }
            }
        }
        if (st) res = Math.max(res,n-start);
        return res;
        
    }
}
