public class Solution {
    public int[] findPermutation(String s) {
        // time complexity: O(N)
        // space complexity: O(1)
        // algorithm: reverse
        int n = s.length();
        int[] res = new int[n+1];
        for (int i = 0; i <= n; i++) {
            res[i] = i+1;
        }
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == 'I') {
                reverse(res, i-cnt, i);
                cnt = 0;
            }
            else cnt++;
        }
        if (cnt > 0) reverse(res, n-cnt, n);
        return res;
    }
    
    private void reverse(int[] res, int i, int j) {
        int t = 0;
        while (i < j) {
            t = res[i];
            res[i] = res[j];
            res[j] = t;
            i++;
            j--;
        }
    }
}
