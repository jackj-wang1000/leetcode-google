public class Solution {
    public int minCost(int[][] costs) {
        // time complexity: O(N*3)
        // space complexity: O(N*3)
        // algorithm: dynamic programming
        int n = costs.length;
        int[][] dp = new int[n][3];  // dp[i][j] denotes the total minCost (of first i houses) when house i are painted with j 
        for (int j = 0; j < 3; j++) {
            dp[0][j] = costs[0][j];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j] = costs[i][j] + Math.min(dp[i-1][(j+1)%3],dp[i-1][(j+2)%3]); 
            }
        }
        return Math.min(dp[n-1][0],Math.min(dp[n-1][1],dp[n-1][2]));
    }
}
