class Solution {
    public String addStrings(String num1, String num2) {
        // time complexity: O(N)
        // space complexity: O(1)
        // algorithm: bit add + reverse 
        StringBuilder res = new StringBuilder();
        int i = num1.length()-1;
        int j = num2.length()-1;
        int add = 0;
        while(i >= 0 && j >= 0) {
            add += num1.charAt(i) - '0' + num2.charAt(j) - '0';
            res.append(String.valueOf(add%10));
            add = add/10;
            i--;
            j--;
        }
        while (i >= 0) {
            add += num1.charAt(i) - '0';
            res.append(String.valueOf(add%10));
            add = add/10;
            i--;
        }
        while (j >= 0) {
            add += num2.charAt(j) - '0';
            res.append(String.valueOf(add%10));
            add = add/10;
            j--;
        }
        if (add != 0) res.append(String.valueOf(add));
        return res.reverse().toString();
        
    }
}
