public class Solution {    
    public List<List<Integer>> verticalOrder(TreeNode root) {    
        // time complexity: O(N)
        // space complexity: O(N)
        // algorithm:  level-order traverse, breadth first search
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (root == null) return res;
        class Node {
            public int idx;
            public TreeNode tn;
            public Node(int l, TreeNode root) {
                idx = l;
                tn = root;
            }
        }
        Queue<Node> q = new LinkedList<Node>();
        Map<Integer, List<Integer>> map = new HashMap<Integer,List<Integer>>();
        q.offer(new Node(0,root));
        int l = 0;
        int r = 0;
        while (!q.isEmpty()) {
            Node curr = q.poll();
            int L= curr.idx;
            if (!map.containsKey(L)) map.put(L,new ArrayList<Integer>());
            map.get(L).add(curr.tn.val);
            l = Math.min(l,L);
            r = Math.max(r,L);
            if (curr.tn.left != null) {
                q.offer(new Node(L-1,curr.tn.left));
            }
            if (curr.tn.right != null) {
                q.offer(new Node(L+1,curr.tn.right));
            }
        }
        for (int i = 0; i < r-l+1; i++) {
            res.add(new ArrayList<Integer>());
        }
        for (int i : map.keySet()) {
            res.set(i-l,map.get(i));
        }
        return res;
    }
}
