class Solution {
    public boolean isPossible(int[] nums) {
        // time complexity:  O(N)
        // space: O(N)
        Map<Integer,Integer> freq = new HashMap<Integer,Integer>();
        Map<Integer,Integer> need = new HashMap<Integer,Integer>();
        int L = nums.length;
        for(int i = 0; i < L; i++) {
            if (!freq.containsKey(nums[i]))  freq.put(nums[i],0); 
            freq.put(nums[i],freq.get(nums[i])+1);
        }
        
        for (int i = 0; i < L; i++) {
            if (freq.get(nums[i]) == 0) continue;
            if(need.containsKey(nums[i]) && need.get(nums[i]) > 0) {
                need.put(nums[i],need.get(nums[i])-1);
                if (!need.containsKey(nums[i]+1)) need.put(nums[i]+1,0);
                need.put(nums[i]+1,need.get(nums[i]+1)+1);
            }
            else if (freq.containsKey(nums[i]+1) && freq.containsKey(nums[i]+2) && freq.get(nums[i]+1) > 0 && freq.get(nums[i]+2)> 0) {
                freq.put(nums[i]+1,freq.get(nums[i]+1)-1);
                freq.put(nums[i]+2,freq.get(nums[i]+2)-1);
                if (!need.containsKey(nums[i]+3)) need.put(nums[i]+3,0);
                need.put(nums[i]+3,need.get(nums[i]+3)+1);
            }
            else return false;
            freq.put(nums[i],freq.get(nums[i])-1);
        }
        return true;
        
        
    }
    
}
