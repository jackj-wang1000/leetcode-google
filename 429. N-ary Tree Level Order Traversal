class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        // time complexity: O(N)
        // space complexity: O(N)
        // algorithm: breadth first search
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (root == null) return res;
        Queue<Node> bfs = new LinkedList<Node>();
        bfs.offer(root);
        while (!bfs.isEmpty()) {
            int sz = bfs.size();
            List<Integer> levelNode = new ArrayList<Integer>();
            for (int i = 0; i < sz; i++) {
                Node curr = bfs.poll();
                levelNode.add(curr.val);
                for (Node node : curr.children) {
                    bfs.offer(node);
                }
            }
            res.add(levelNode);
        }
        return res;
    }
}
