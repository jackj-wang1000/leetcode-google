class Solution {
    public boolean xorGame(int[] nums) {
        int sum = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            sum = sum ^ nums[i];
        }
        if (sum == 0 || n % 2 == 0) return true;
        else return false;
    }
}

/*
class Solution {
    public boolean xorGame(int[] nums) {
        
        int sum = 0;
        int n = nums.length;
        StringBuilder strb = new StringBuilder(n);
        Map<String,Boolean> map = new HashMap<String,Boolean>();
        for (int i = 0; i < n; i++) {
            sum  = sum ^ nums[i];
            strb.append("0");
        }
        //Set<Integer> set = new HashSet<Integer>();
        return helper(sum,nums,strb,map);
    }
    
    private boolean helper(int sum, int[] nums, StringBuilder strb, Map<String, Boolean> map) {
        int n = nums.length;
        String str = strb.toString();
        if (map.containsKey(str)) return map.get(str);
        if (sum == 0) { map.put(str,true); return true;}
        boolean res = false;
        for (int i = 0; i < n; i++) {
            if (strb.charAt(i) == '0') {
                strb.setCharAt(i,'1');
                if (!helper(sum ^ nums[i],nums,strb,map)) res = true;
                strb.setCharAt(i,'0');
                if (res) break;
            }
        }
        map.put(str,res);
        return res;
    }
}
*/
