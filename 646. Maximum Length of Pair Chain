class Solution {
    public int findLongestChain(int[][] pairs) {
        // time complexity: O(NlogN)
        // space complexity: O(N)
        //algorithm: binary indexed tree, (update from current index when update, evaluate from current index when evaluate)
        int n = pairs.length;
        Arrays.sort(pairs,new Comparator<int[]>(){
            public int compare(int[] x, int[] y) {
                return  x[0] == y[0] ? x[1] - y[1] : x[0] - y[0];
            }
        });
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        int cnt = 0;
        int[] w = new int[n*2];
        for (int i = 0; i < n; i++) {
            w[cnt] = pairs[i][0];
            w[cnt+1] = pairs[i][1]+1;  // update max chain length from upbound+1;
            cnt += 2;
        }
        Arrays.sort(w);
        cnt = 1;
        map.put(w[0],cnt);
        for (int i = 1; i < 2*n; i++) {
            if (w[i] != w[cnt-1]) {
                w[cnt++] = w[i];
                map.put(w[i],cnt);
            }
        }
        
        int res = 0;
        int[] BIT = new int[cnt+1];
        for (int i = 0; i < n; i++) {
            int index = map.get(pairs[i][0]);
            int v = evalue_max(BIT,index);
            res = Math.max(v+1,res);  // v+1 is the max chain length ending with current pair: pairs[i];
            update(BIT, map.get(pairs[i][1]+1), v+1);  // update max length of chain by BIT[i];
        }
        return res;
    }
    
    private int evalue_max(int[] BIT, int i) {
        int res = BIT[i];                     // count max chain length from current index; such as current index 6, might updated by 5
        i -= i & (-i);
        while (i > 0) {
            res = Math.max(res,BIT[i]);
            i -= i & (-i);
        }
        return res;
    }
    
    private void update(int[] BIT, int i, int v) {
        while (i < BIT.length) {           // update max chain length from  (current index) upbound+1;
            BIT[i] = Math.max(BIT[i],v);
            i += i & (-i);
        }
    }
}
