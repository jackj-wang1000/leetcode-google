class Solution {
    public int maximumSwap(int num) {
        // time complexity:  O(N),  N: length of digtal
        // space complexity: O(N)
        // dynamic programming, dp[i] :  Till current index i,  index of array's maximum value
        int[] dig = new int[10];
        int i = 0;
        int[] dp = new int[10];
        while(num > 0) {
            dig[i] = num % 10;
            num = num / 10;
            if (i > 0 ) {
                dp[i] = dig[i] > dig[dp[i-1]] ? i : dp[i-1];   // must use >, in case of like 1993
            }
            i++;
        }
        int res = 0;
        i--;
        int cnt = 1;
        while (i >= 0) {
            if (dp[i] < i && dig[i] < dig[dp[i]] && cnt > 0) { // must add dig[i] < dig[exch[i]]
                res = res*10+dig[dp[i]];
                dig[dp[i]] = dig[i];
                cnt--;
            }
            else {
                res = res*10+ dig[i];
            }
            i--;
        }
        return res;
    }
}
