class Solution {
    public double largestSumOfAverages(int[] A, int K) {
        //  time complexity:  O(K*N^2)
        //  space complexity: O(K*N)
        // algorithm:  dynamic programming
        int n = A.length;
        double[][] dp = new double[n][K];  // dp[i][k] denote largest score from array A[0,...i-1] divided into k group 
        int[] sum = new int[n+1];
        double res = 0;
        for (int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + A[i];
            dp[i][0] = (double)sum[i+1]/(i+1);        // must use double type cast
            //System.out.println("dp["+i+"]["+0+"]= "+dp[i][0]);
        }
        res = Math.max(dp[n-1][0],res);
        for (int k = 1; k < K; k++) {
            for (int i = k; i < n; i++) {
                for (int j = k-1; j < i; j++) {
                    dp[i][k] = Math.max(dp[i][k],dp[j][k-1] + (double)(sum[i+1] - sum[j+1])/(i-j));     // must use double type cast
                }
                //System.out.println("dp["+i+"]["+k+"]= "+dp[i][k]);
            }
            res = Math.max(dp[n-1][k],res);
        }
        
        return res;
    }
}
