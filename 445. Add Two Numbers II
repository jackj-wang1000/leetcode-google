class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // time complexity: O(N1 +N2) 
        // space complexity: O(1)
        // algorithm: list, record most recently created node with val less than 9;
        int n1 = getLeng(l1);
        int n2 = getLeng(l2);
        return  n1 > n2 ? addTwoList(l1,l2,n1-n2) : addTwoList(l2,l1,n2-n1);
        
    }
    
    private ListNode addTwoList(ListNode l1, ListNode l2, int diff) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        ListNode tag = dummy;  // first node with val less than 9;
        while (diff > 0) {
            ListNode node = new ListNode(l1.val);
            curr.next = node;
            curr = curr.next;
            l1 = l1.next;
            if (node.val < 9) tag = node;
            diff--;
        }

        while (l1 != null) {
            ListNode node = new ListNode(l1.val + l2.val);
            if (node.val > 9) {
                node.val = node.val % 10;
                tag.val++;
                while(tag.next != null) {
                    tag.next.val = 0;
                    tag = tag.next;
                }
            }
            curr.next = node;
            curr = curr.next;
            l1 = l1.next;
            l2 = l2.next;
            if (node.val < 9) tag = node;
        }
        return dummy.val == 0 ? dummy.next : dummy;
    }
    
    private int getLeng(ListNode l1) {
        int res = 0;
        while (l1 != null) {
            res++;
            l1 = l1.next;
        }
        return res;
    }
}




/*
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // time complexity: O(N1+N2)
        // space complexity: O(N1+N2)
        // algorithm: recursion
        int n1 = getLength(l1);
        int n2 = getLength(l2);
        ListNode dummy = new ListNode(1);
        dummy.next = n1 >= n2 ? helper(l1,l2,n1-n2) : helper(l2,l1,n2-n1);
        if (dummy.next != null && dummy.next.val > 9) {
            dummy.next.val = dummy.next.val % 10;
            return dummy;
        }
        else return dummy.next;
    }
    
    
    private int getLength(ListNode l1) {
        int res = 0;
        while (l1 != null) {
            res++;
            l1 = l1.next;
        }
        return res;
    }
    
    private ListNode helper(ListNode l1, ListNode l2, int diff) {
        if (l1 == null) return null;
        ListNode post = diff > 0 ? helper(l1.next, l2, diff-1) : helper(l1.next,l2.next,0);
        ListNode res = diff > 0 ? new ListNode(l1.val) : new ListNode(l1.val + l2.val);
        if (post != null && post.val > 9) {
            post.val = post.val % 10;
            res.val++;
        }
        res.next = post;
        return res;
    }
}
*/


/*
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // time complexity: O(N1+N2)
        // space complexity: O(N1+N2)
        // algorithm: stack
        Stack<ListNode> st1 = new Stack<ListNode>();
        Stack<ListNode> st2 = new Stack<ListNode>();
        while (l1 != null) {
            st1.push(l1);
            l1 = l1.next;
        }
        while (l2 != null) {
            st2.push(l2);
            l2 = l2.next;
        }
        
        ListNode dummy = new ListNode(1);
        int sum = 0;
        while (!st1.isEmpty() || !st2.isEmpty()) {
            if (!st1.isEmpty()) {
                ListNode s1 = st1.pop();
                sum = sum + s1.val;
            }
            if (!st2.isEmpty()) {
                ListNode s2 = st2.pop();
                sum = sum + s2.val;
            }
            ListNode node = new ListNode(sum%10);
            node.next = dummy.next;
            dummy.next = node;
            sum = sum/10;
        }
        
        if (sum == 0) return dummy.next;
        else return dummy;
    }
}
*/



/*
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // time complexity: O(n1+n2)
        // space complexity: O(Max(n1,n2))
        // algorithm: list reverse + count
        int n1 = getLength(l1);
        int n2 = getLength(l2);
        if (n1 == n2 && n1 == 0) return new ListNode(0);
        if (n1 >= n2) {
            return addTwoList(l1,l2,n1-n2);
        }
        else return addTwoList(l2,l1,n2-n1);
    }
    
    private ListNode addTwoList(ListNode l1, ListNode l2, int diff) {
        ListNode dummy = new ListNode(0);
        ListNode curr_l1 = l1;
        ListNode curr_l2 = l2;
        while (diff > 0) {
            ListNode node = new ListNode(curr_l1.val);
            node.next = dummy.next;
            dummy.next = node;
            curr_l1 = curr_l1.next;
            diff--;
        }
        while (curr_l1 != null) {
            ListNode node = new ListNode(curr_l1.val + curr_l2.val);
            node.next = dummy.next;
            dummy.next = node;
            curr_l1 = curr_l1.next;
            curr_l2 = curr_l2.next;
        }
        ListNode pre = dummy;
        ListNode curr = dummy.next;
        int carry = 0;
        while (curr != null) {
            int next_carr = (curr.val + carry) / 10;
            curr.val = (curr.val + carry) % 10;
            pre = curr;
            curr = curr.next;
            carry = next_carr;
        }
        if (carry != 0) pre.next = new ListNode(carry);
        return reverseList(dummy);
    }
    
    private ListNode reverseList(ListNode dummy) {
        ListNode pre = dummy.next;
        ListNode curr = pre.next;
        while (curr != null) {
            pre.next = curr.next;
            curr.next = dummy.next;
            dummy.next = curr;
            curr = pre.next;
        }
        return dummy.next;
    }
    
    private int getLength(ListNode l1) {
        int n = 0;
        while (l1 != null) {
            n++;
            l1 = l1.next;
        }
        return n;
    }
}
*/
