class Solution {
    public int findShortestSubArray(int[] nums) {
        // time complexity: O(N)
        // space complexity: O(N)
        // algorithm: scan
        int n = nums.length;
        Map<Integer,Integer> index = new HashMap<Integer,Integer>();
        Map<Integer,Integer> cnt = new HashMap<Integer,Integer>();
        int max_cnt = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if(!cnt.containsKey(nums[i])) {
                cnt.put(nums[i],1);
                index.put(nums[i],i);
            }
            else {
                cnt.put(nums[i],cnt.get(nums[i])+1);
            }
            if(cnt.get(nums[i]) > max_cnt) {
                max_cnt = cnt.get(nums[i]);
                res = i-index.get(nums[i])+1;
            }
            else if (cnt.get(nums[i]) == max_cnt)  {
                res = Math.min(i-index.get(nums[i])+1,res);
            }
        }
        
        return res;
        
    }
}
