class Solution {
    public int minimumLengthEncoding(String[] words) {
        
        // time complexity:  O(N), N: total # of characters
        // space complexity: O(N)
        // algorithm : build prefix tree
        int n = words.length;
        Comparator<String> cmp = new Comparator<String>() {
            @Override
            public int compare(String a, String b) {
                return b.length() - a.length();
            }
        };
        Arrays.sort(words,cmp);
        PrefixTree trie  = new PrefixTree();
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (trie.insert(words[i]))  res += words[i].length()+1;
        }
        return res;
    }
    
    class TreeNode{
        public TreeNode[] children;
        boolean isKey;
        public TreeNode() {
            children = new TreeNode[26];
            isKey = false;
        }
    }
    
    class PrefixTree{
        public TreeNode root;
        public PrefixTree() {
            root = new TreeNode();
        }
        public boolean insert(String str) {
            int l = str.length();
            TreeNode curr = root;
            boolean st = false;
            for (int i  = l-1; i >= 0; i--) {
                char c = str.charAt(i);
                if (curr.children[c-'a'] == null) {
                    TreeNode node = new TreeNode();
                    curr.children[c-'a'] = node;
                    st = true;
                }
                curr = curr.children[c-'a'];
            }
            curr.isKey = true;
            return st;
        }
        
    }

}
