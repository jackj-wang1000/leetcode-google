class Solution {
    public int numFactoredBinaryTrees(int[] A) {
        
        // time complexity: O(N^2)
        // space complexity: O(N)
        int n = A.length;
        int[] dp = new int[n];   // dp[i] denote # of trees with A[i] as root
        Arrays.sort(A);   // O(N*logN)
        int low, high;
        long t;
        int res = 0;
        for (int i = 0; i < n; i++) {
            low = 0;
            high = i-1;
            while (low <= high) {
                t = (long)A[low] * A[high];
                if (t > A[i]) high--;
                else if (t < A[i]) low++;
                else {
                    Long x = (low == high ? (long)dp[low] *dp[high] : 2L*(long)dp[low]*dp[high]) % 1000000007;
                    dp[i] = (dp[i] + x.intValue()) % 1000000007;
                    low++;
                    high--;
                }
            }
            dp[i] = (dp[i] + 1) % 1000000007;   // tree with only A[i]
            res = (res + dp[i]) % 1000000007;
        }
        return res;
    }
}
