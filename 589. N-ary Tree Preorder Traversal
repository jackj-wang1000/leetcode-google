class Solution {
    public List<Integer> preorder(Node root) {
        // time complexity: O(N)
        // space complexity: O(logN)
        // algorithm: stack
        if (root == null) return new ArrayList<Integer>();
        Stack<Node> st = new Stack<Node>();
        Stack<Integer> index = new Stack<Integer>();
        List<Integer> res = new ArrayList<Integer>();
        Node curr = root;
        while (true) {
            res.add(curr.val);
            st.push(curr);
            index.push(1);
            List<Node> child = curr.children;
            if (child == null || child.size() == 0) break;
            else curr = child.get(0);
        }
        while (!st.isEmpty()) {
            curr = st.peek();
            int top_index = index.pop();
            if (curr.children == null || curr.children.size() <= top_index) {
                st.pop();
            }
            else {
                curr = curr.children.get(top_index);
                index.push(top_index+1);
                while(true) {
                    res.add(curr.val);
                    st.push(curr);
                    index.push(1);
                    List<Node> child = curr.children;
                    if (child == null || child.size() == 0) break;
                    else curr = child.get(0);
                }
            }
        }
        return res;
    }
}
