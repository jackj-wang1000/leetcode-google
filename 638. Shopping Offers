class Solution {
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        // dfs
        int L = price.size();
        int res = 0;
        for (int i = 0; i < L; i++) {
            res += price.get(i)*needs.get(i);
        }
        for(List<Integer> lst : special) {
            boolean isValid = true;
            for (int i = 0; i < L; i++) {
                if (lst.get(i) > needs.get(i)) isValid = false;
                needs.set(i,needs.get(i)-lst.get(i));
            }
            if (isValid) {
                res = Math.min(res,shoppingOffers(price,special,needs)+lst.get(L));
            }
            for ( int i = 0; i < L; i++) {
                needs.set(i,needs.get(i)+lst.get(i));
            }
            
        }
        return res;
 
    }
    
}
