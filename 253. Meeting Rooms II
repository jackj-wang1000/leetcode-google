public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        
    }
}



public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        // time complexity: O(NlogN)
        // space complexity: O(N)
        // algorithm: heap
        Arrays.sort(intervals,new Comparator<Interval>(){
            public int compare(Interval x, Interval y) {
                return x.start - y.start;
            }
        });
        
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        int n = intervals.length;
        if (n == 0) return 0;
        int res = 1;
        pq.offer(intervals[0].end);
        for (int i = 1; i < n; i++) {
            if (intervals[i].start >= pq.peek()) {
                pq.poll();
            }
            pq.offer(intervals[i].end);
            res = Math.max(res,pq.size());
        }
        return res;
        
    }
}

// ************************************************************************************************
public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        // time complexity: O(NlogN)
        // space complexity: O(N)
        // algorithm: TreeMap
        TreeMap<Integer,Integer> map = new TreeMap<Integer,Integer>();
        int n = intervals.length;
        for (int i = 0; i < n; i++) {
            if (!map.containsKey(intervals[i].start)) map.put(intervals[i].start,1);
            else map.put(intervals[i].start,map.get(intervals[i].start)+1);
            if (!map.containsKey(intervals[i].end)) map.put(intervals[i].end,-1);
            else map.put(intervals[i].end,map.get(intervals[i].end)-1);
            
        }
        int res = 0;
        int curr = 0;
        for (int i : map.navigableKeySet()) {
            curr = curr + map.get(i);
            res = Math.max(res,curr);
        }
        return res;
    }
}
