class Solution {
    public String longestWord(String[] words) {
        // time complexiyt: O(N*logN), sorting + scan
        // space complexity: O(N)
        // sorting then scan.
        Comparator<String> cmp = new Comparator<String>(){
            @Override
            public int compare(String x, String y){
                return x.length() == y.length()? x.compareTo(y) : x.length() - y.length();
            }
            
        };
        Arrays.sort(words, cmp);
        //Map<String,String> map = new HashMap<String,String>();
        Set<String> set = new HashSet<String>();
        int n = words.length;
        String res = "";
        int strLen = 0;
        for (int i = 0; i < n; i++) {
            //stem.out.println("current word: "+words[i]);
            int l = words[i].length();
            if (words[i].length() == 1) {
                set.add(words[i]);
                if (l > strLen) { res = words[i]; strLen = 1; }
            }
            else {
                if (set.contains(words[i].substring(0,l-1))){
                    set.add(words[i]);
                    if (l > strLen) { res = words[i]; strLen = l; }
                }
            }
        }
        return res;
    }
}
