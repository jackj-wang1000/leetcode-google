public class Solution {
    private int res;
    public int strobogrammaticInRange(String low, String high) {
        res = 0;
        int l1 = low.length();
        int l2 = high.length();
        helper(low,high,"",l1,l2);
        helper(low,high,"0",l1,l2);
        helper(low,high,"1",l1,l2);
        helper(low,high,"8",l1,l2);
        return res;
    }
    
    private void helper(String low, String high, String curr, int l1, int l2) {
        int L = curr.length();
        if (L >= l1 && L <= l2) {
            if (L > l1 && L < l2) {if(curr.charAt(0) != '0') res++;}
            else if ((L == l1 && curr.compareTo(low) >= 0) || (curr.charAt(0) != '0' && L == l2 && curr.compareTo(high) <= 0))
                res++;
        }
        else if (L > l2) return;
            
        helper(low, high, '0' + curr + '0', l1,l2);
        helper(low, high, '1' + curr + '1', l1,l2);
        helper(low, high, '8' + curr + '8', l1,l2);
        helper(low, high, '6' + curr + '9', l1,l2);
        helper(low, high, '9' + curr + '6', l1,l2);
    }
}

// ******************************************************************************

public class Solution {
    public static void main(String[] args)
     {
       Solution s = new Solution();
       int res = s.strobogrammaticInRange("123", "8916168");
       System.out.println("total strobogrammatic numbers= " + res);
     }


    public int strobogrammaticInRange(String low, String high) {
        
        int res = findLE(high);
        for (int i = low.length(); i < high.length(); i++) {
            res +=  i % 2 == 1 ? 12 * myPow(5,(i+1)/2-2) : 4 * myPow(5,(i+1)/2-1);
        }
        res -= findLE(low);
        if (isStrobogrammatic(high)) res++;
        return res;
    }
    
    private boolean isStrobogrammatic(String high) {
        int end = high.length()-1;
        int start = 0;
        while (start <= end) {
            char c1 = high.charAt(start);
            char c2 = high.charAt(end);
            if (c1 == c2) {
                if (!(c1 == '0' || c1 == '1' || c1 == '8')) return false;
            }
            else  {
                if (!(c1 == '6' && c2 == '9') && !(c1 == '9' && c2 == '6')) return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    private int findLE(String high) {
        int n = high.length();
        int res = 0;
        char[] s = new char[]{'0','1','6','8','9'};
        Map<Character,Character> map = new HashMap<Character,Character>();
        map.put('0','0');
        map.put('1','1');
        map.put('8','8');
        map.put('6','9');
        map.put('9','6');
        StringBuilder strb = new StringBuilder();
        int L = (n+1)/2;
        for (int i = 0; i < L; i++) {
            int j = 0;
            char c = high.charAt(i);
            while (j < 5) {
                if (high.charAt(i) <= s[j]) break;
                j++;
            }
            if (i == 0) res += n%2 == 1 ? myPow(5,L-2)*(j-1)*3 : myPow(5,L-1)*(j-1);
            else if (i == L-1 && n%2 == 1) {
                    if (high.charAt(i) == '9') res += 3;
                    else if (high.charAt(i) >= '2') res += 2;
                    else res += j;
            }
            else {
                     res += n % 2 == 1 ? myPow(5,L-i-2)*j*3 : myPow(5,L-i-1)*j;
             }
            if ((i == L-1) && (c == '0' || c == '1' || c == '8')) {
                     int k = n % 2 == 1?  L-2: L-1;
                     while ( k >= 0) {
                               strb.append(map.get(high.charAt(k)));
                               k--;
                      }
                      if (strb.toString().compareTo(high) < 0) res++;
            }
            if (high.charAt(i) < s[j]) return res;
        }
        return res;
    }
    
    private int myPow(int x, int y) {
        if (y == 0) return 1;
        int t = myPow(x,y/2);
        return  y % 2 == 0 ? t*t : t*t*x;
    }
}
