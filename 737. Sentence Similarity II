class Solution {
    public boolean sentenceSimilarity(String[] words1, String[] words2, String[][] pairs) {
        // HashMap + Unionfind
        // time complexity: O(N1*logN2 + N2 + N2*logN2),  N1: words1 or words2 array size,  N2: pairs array size
        // space : O(2*N), N: pairs array size, including HashMap and root array
        int L1= words1.length;
        int L2 = words2.length;
        if (L1 != L2) return false;
        Map<String,Integer> map = HashMap<String,Integer>();
        int id = 0;
        int L =pairs.length;
        int[] root = new int[L*2];
        // any sequence of M union and find operations on N objects takes  O(N + M*logN) time.
        for (int i =0; i < L; i++) {
            if (!map.containsKey(pairs[i][0])) { map.put(pairs[i][0],id); root[id] = id; id++;}
            if (!map.containsKey(pairs[i][1])) { map.put(pairs[i][1],id); root[id] = id; id++;}
            int id1 = map.get(pairs[i][0]);
            int id2 = map.get(pairs[i][1]);
            int root1 = findRoot(id1);  // O(logN2)
            int root2 = findRoot(id2);  // O(logN2)
            unite(root,root1,root2);   // O(1)
        }
        
        for(int i = 0; i < L1; i++) {
            int id1 = map.get(words1[i]);
            int id2 = map.get(words2[i]);
            if (findRoot(root,id1) != findRoot(root,id2)) return false;
        }
        return true;
        
    }
    
    private int findRoot(int[] root, int id) {
        int i;
        while (id != root[id]) {
            i = root[id];
            root[id] = root[i];
            id = root[id];
        }
        return id;
    }
    
    private void unite(int[] root, int id1, int id2) {
        root[id1] = id2;
    }
    
}
