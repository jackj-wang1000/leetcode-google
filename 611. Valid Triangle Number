class Solution {
    public int triangleNumber(int[] nums) {
        // time complexity: O(N^2)
        // space complexity: O(1)
        int n = nums.length;
        Arrays.sort(nums);
        int low,high;
        int res = 0;
        for(int i = n-1; i >= 2; i--) {
            low = 0;
            high = i-1;
            while (low < high) {
                int sum = nums[low] + nums[high];
                if (sum <= nums[i]) low++;
                else {
                    res += high-low;
                    high--;
                }
            }
        }
        return res;
    }
}


/*
class Solution {
    public int triangleNumber(int[] nums) {
        // time complexity: O(log(N)*N^2)
        // space complexity: O(1)
        // binary search
        int n = nums.length;
        Arrays.sort(nums);   // N*logN
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j+1 < n; j++) {
                if (nums[n-1] < nums[i]+nums[j]) {
                    res += n-j-1;
                }
                else if(nums[j+1] < nums[i]+nums[j]) {
                    int ind = find(nums,j+1,n-1,nums[i]+nums[j]);
                    res += ind-j-1;
                }
            }
        }
        return res;
    }
    
    private int find(int[] nums, int low, int high, int s) {   // find the first index i that makes nums[i] >= s;
        int mid;
        while (low < high) {
            mid = low + (high-low)/2;
            if (nums[mid] < s) low = mid+1;
            else high = mid;
        }
        return high;
    }
}
*/
