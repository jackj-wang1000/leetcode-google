class Solution {
    public int preimageSizeFZF(int K) {
        // time complexity: O((log(K)^2)
        // space complexity: O(1)
        // actually, 5 * K > x > 4 * K;    K = x/5 + x/25 + x/5^3 + x/5^4 + ... = (1-(1/5)^n)*x/4 < x/4;

        long x_max = 5L * K;
        long x_min = 4L * K; 
        long mid = x_min + (x_max - x_min)/2;
        while (x_min <= x_max) {   // must use <= ,not <.  In case of x_min increased to x_max, 
            mid = x_min + (x_max - x_min)/2;
            int n = numberOfZero(mid);
            //System.out.println("numberofZeros: "+n+" mid: "+mid+" min:" + x_min + " max:"+x_max);
            if (n < K) {
                x_min = (mid/5 + 1)*5;
            }
            else if (n > K) {
                x_max = (mid/5-1)*5;
            }
            else return 5;
        }
        return 0;
    }

    private int numberOfZero(long x) {   // O(log(x))
        long t = 5;
        int res = 0;
        while (x >= t) {
            Long tmp = x/t;   // define as class type
            res = res + tmp.intValue();
            t = t * 5;
        }
        return res;
    }
    
}
