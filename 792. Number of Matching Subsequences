class Solution {
    public int numMatchingSubseq(String S, String[] words) {
        // time complexity: O(M*N),  M is length of String S,  N is size of words array.
        // space complexity: O(N)
        
        int res = 0;
        int n = words.length;
        int[] st = new int[n];    // save words[i]'s  current position
        Queue<Integer>[] match = new LinkedList[26];    // words[ind]'s  st[ind]_th character is pushed into corresponding queue.
        for (int i = 0; i < 26; i++) {
            match[i] = new LinkedList<Integer>();
        }
        for (int i = 0; i < n; i++) {                  // take O(n)
            match[words[i].charAt(0) - 'a'].offer(i);
            st[i] = 1;
        }
        for (int i = 0; i < S.length(); i++) {
            int j = S.charAt(i) - 'a';
            int sz = match[j].size();
            for (int k = 0; k < sz; k++) {
                int ind = match[j].poll();
                if (st[ind] == words[ind].length()) res++;
                else {
                    match[words[ind].charAt(st[ind])-'a'].offer(ind);
                    st[ind]++;
                }
            }
        }
        return res;
    }
}


========================================================================================================================
http://bookshadow.com/weblog/2018/03/04/leetcode-number-of-matching-subsequences/
class Solution {
    public int numMatchingSubseq(String S, String[] words) {
        // time complexity:  O(M*26 + K), K is total number of character in words array
        // space complexity:  O(M*26)
        int sLen = S.length();
        int[][] dp = new int[sLen+1][26];  // dp[idx][c]  represent the index first time c show up in String S after idx (inclusive)
        int[] last = new int[26];
        for (int i = 0; i < sLen; i++) {    // O(M*26)
            int x = S.charAt(i) - 'a';
            for (int j = last[x]; j <= i; j++) {
                dp[j][x] = i+1;
            }
            last[x] = i+1;
        }
        int res = 0;
        for (int i = 0; i < words.length; i++) {  // O(words.length * words[i].length())  total number of characters in words.
            res += check(dp,words[i]);
        }
        return res;
    }
    
    private int check(int[][] dp, String s) {
        int next = 0;
        for (int i = 0; i < s.length(); i++) {
            next = dp[next][s.charAt(i)-'a'];
            if (next == 0) return 0;
        }
        return 1;
    }
}
