class Solution {
    public int numMatchingSubseq(String S, String[] words) {
        // time complexity: O(M*N),  M is length of String S,  N is size of words array.
        // space complexity: O(N)
        
        int res = 0;
        int n = words.length;
        int[] st = new int[n];    // save words[i]'s  current position
        Queue<Integer>[] match = new LinkedList[26];    // words[ind]'s  st[ind]_th character is pushed into corresponding queue.
        for (int i = 0; i < 26; i++) {
            match[i] = new LinkedList<Integer>();
        }
        for (int i = 0; i < n; i++) {                  // take O(n)
            match[words[i].charAt(0) - 'a'].offer(i);
            st[i] = 1;
        }
        for (int i = 0; i < S.length(); i++) {
            int j = S.charAt(i) - 'a';
            int sz = match[j].size();
            for (int k = 0; k < sz; k++) {
                int ind = match[j].poll();
                if (st[ind] == words[ind].length()) res++;
                else {
                    match[words[ind].charAt(st[ind])-'a'].offer(ind);
                    st[ind]++;
                }
            }
        }
        return res;
    }
}
