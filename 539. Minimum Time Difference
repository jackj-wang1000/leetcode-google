class Solution {
    public int findMinDifference(List<String> timePoints) {
        // time complexity: O(NlogN)
        // space complexity: O(N)
        // algorithm : Sort
        class MyTime{
            public int hour;
            public int min;
            public MyTime(int h, int m) {
                hour = h;
                min = m;
            }
        }
        int n =timePoints.size();
        MyTime[] arr = new MyTime[n];
        int j = 0;
        for (String str : timePoints) {
            int l = str.length();
            int i  = 0;
            arr[j] = new MyTime(0,0);
            while (i < l) {
                if (str.charAt(i) == ':') break;
                arr[j].hour = arr[j].hour*10 + str.charAt(i) - '0';
                i++;
            }
            i++;
            while (i < l) {
                arr[j].min = arr[j].min*10 + str.charAt(i) - '0';
                i++;
            }
            //System.out.println("arr[j] hour"+arr[j].hour+" min "+arr[j].min);
            j++;
        }
        
        Arrays.sort(arr,new Comparator<MyTime>(){
            public int compare(MyTime x, MyTime y) {
                return x.hour != y.hour ? x.hour - y.hour : x.min-y.min;
            }
        });
        
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n-1; i++) {
            res = Math.min(res, (arr[i+1].hour-arr[i].hour)*60+arr[i+1].min-arr[i].min);
        }
        res = Math.min(res,(arr[0].hour-arr[n-1].hour+24)*60+arr[0].min-arr[n-1].min);
        return res;
    }

}
