class Solution {
    public double largestTriangleArea(int[][] points) {
        // time complexity: O(N^3)
        // space complexity: O(1)
        
        Comparator<int[]> cmp = new Comparator<int[]>(){
            @Override
            public int compare( int[] x,  int[] y){
                return x[0] == y[0] ? y[1]-x[1] : x[0] - y[0];
            }
        };
        Arrays.sort(points,cmp);
        /*
        Arrays.sort(points, new Comparator<int[]>(){
            @Override
            public int compare( int[] x,  int[] y){
                return x[0] == y[0] ? y[1]-x[1] : x[0] - y[0];
            }
        });
        */
        int n = points.length;
        double res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    res = Math.max(res,calculateArea(points[i],points[j],points[k])/2.0);
                }
            }
        }
        
        return res;
    }
    
    private int calculateArea(int[] a, int[] b, int[] c) {
        int dx1 = c[0] - b[0];
        int dy1 = c[1] - b[1];
        int dx2 = a[0] - b[0];
        int dy2 = a[1] - b[1];
        int cross = dx1*dy2-dy1*dx2;
        if (cross == 0) return 0;
        else {
            return Math.abs((b[1]+a[1])*(b[0]-a[0]) + (c[1]+b[1])*(c[0]-b[0]) - (c[1]+a[1])*(c[0]-a[0]));
        }
    }
}
