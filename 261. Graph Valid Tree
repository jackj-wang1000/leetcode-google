public class Solution {
    public boolean validTree(int n, int[][] edges) {
        // time complexity: O(N*logN)
        // space complexity: O(N)
        // algorithm: union-find
        int L = edges.length;
        if (L != n-1) return false;
        
        int[] root = new int[n];
        int size = n;
        for (int i = 0; i < n; i++) {
            root[i] = i;
        }
        for (int i = 0; i < L; i++) {
            int r1 = findRoot(edges[i][0],root);
            int r2 = findRoot(edges[i][1],root);
            if (r1 == r2) return false;
            root[r1] = r2;
            size--;
        }
        return size == 1;
    }
    
    private int findRoot(int idx, int[] root) {
        while (root[idx] != idx) {
            root[idx] = root[root[idx]];
            idx = root[idx];
        }
        return idx;
    }
}

// ************************************************************************
public class Solution {
    private int cnt;
    public boolean validTree(int n, int[][] edges) {
        // time complexity: O(N)
        // space complexity: O(N)
        // algorithm: depth first search
        cnt = 0;
        ArrayList<Integer>[] graph = new ArrayList[n];
        int L = edges.length;
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < L; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            graph[u].add(v);
            graph[v].add(u);
        }
        boolean[] visited = new boolean[n];
        return helper(graph,visited,0,-1) && cnt == n;
    }
    
    private boolean helper(ArrayList<Integer>[] graph, boolean[] visited, int curr, int pre) {
        visited[curr] = true;
        cnt++;
        for(Integer i : graph[curr]) {
            if (i != pre) {
                if (visited[i] || !helper(graph,visited,i,curr)) return false;
            }
        }
        return true;
    }
}
