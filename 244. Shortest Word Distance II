public class WordDistance {
    Map<String, List<Integer>> map;
    public WordDistance(String[] words) {
        // time complexity: O(l1+l2) for each query. 
        // space complexity: O(N)  N: words array size
        // algorithm: HashMap + double pointer
        int n = words.length;
        for (int i = 0;i < n; i++) {
            if (!map.containsKey(words[i])) map.put(words[i],new ArrayList<Integer>());
            map.get(words[i]).add(i);
        }
    }
    
    
    public int shortest(String word1, String word2) {
        List<Integer> list1 = map.get(word1);
        List<Integer> list2 = map.get(word2);
        
        int idx1 = 0;
        int idx2 = 0;
        int res = Math.abs(list1.get(idx1) - list2.get(idx2));
        while (idx1 < list1.size() && idx2 < list2.size()) {
            res = Math.min(res,Math.abs(list1.get(idx1) - list2.get(idx2)));
            if (list1.get(idx1) > list2.get(idx2)) {
                idx2++;
            }
            else {
                idx1++;
            }
        }
        return res;
    }
}
