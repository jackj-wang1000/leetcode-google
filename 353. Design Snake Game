public class SnakeGame {

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    public SnakeGame(int width, int height, int[][] food) {

    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {

    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */



// *********************************************************************************************************

public class SnakeGame {
    
    private Deque<Integer> dek;
    private int width, height;
    private Set<Integer> body;
    private int idx;
    private int[][] food;
    private Map<String,int[]> map;
    private int score;

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    public SnakeGame(int width, int height, int[][] food) {
        dek = new LinkedList<Integer>();
        dek.offerLast(0);
        this.width = width;
        this.height = height;
        body = new HashSet<Integer>();
        this.food = food;
        idx = 0;
        score = 0;
        map = new HashMap<String,int[]>();
        map.put("U", new int[]{-1,0});
        map.put("L", new int[]{0,-1});
        map.put("R", new int[]{0,1});
        map.put("D", new int[]{1,0});
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        int head = dek.peekFirst();
        int tail = dek.pollLast();
        body.remove(tail);
        int x = head / width;
        int y = head % width;
        int[] d = map.get(direction);
        //int x_next = x + map.get(direction)[0];
        //int y_next = y + map.get(direction)[1];
        int x_next = x + d[0];
        int y_next = y + d[1];
        int pos = x_next * width + y_next;
        dek.offerFirst(pos);
        if (!(x_next >= 0 && x_next < height && y_next >= 0 && y_next < width) || body.contains(pos)) return -1;
        body.add(pos);
        if (idx < food.length && food[idx][0]*width + food[idx][1] == pos) {
            dek.offerLast(tail);
            body.add(tail);
            idx++;
            score++;
        }
        return score;
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */
